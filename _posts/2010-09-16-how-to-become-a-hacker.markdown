--- 
title: !binary |
  44CKSG93IFRvIEJlY29tZSBBIEhhY2tlcuOAi+iKgumAiQ==

type: post
layout: post
tags: 
- Code
- Hacker
---
<p align="justify"><span style="font-size: small">摘录自《How To Become A Hacker》,感觉不错，转给大家。</span></p>  <p align="justify"><span style="font-size: small">作者信息：</span></p>  <p align="justify"><span style="font-size: small">Eric Steven Raymond</span></p>  <p align="justify"><span style="font-size: small"><span style="text-decoration: underline">Thyrsus Enterprises</span></span></p>  <p align="justify"><span style="font-size: small"><span style="text-decoration: underline"><</span><span style="text-decoration: underline">esr@thyrsus.com</span>></span></p>  <p align="justify"><span style="font-size: small">Copyright © 2001 Eric S. Raymond</span></p>  <p align="justify"><span style="font-size: small"></span></p>  <p align="justify"><span style="font-size: small">摘录如下：</span></p>  <p align="justify">Learn how to program.</p>  <p align="justify"><span style="font-size: small">This, of course, is the fundamental hacking skill. If you don't know any computer languages, I recommend starting with Python. It is cleanly designed, well documented, and relatively kind to beginners. Despite being a good first language, it is not just a toy; it is very powerful and flexible and well suited for large projects. I have written a more detailed <span style="text-decoration: underline">evaluation of Python</span>. Good <span style="text-decoration: underline">tutorials</span> are available at the <span style="text-decoration: underline">Python web site</span> .</span></p>  <p align="justify"><span style="font-size: small"></span></p>  <p align="justify"><span style="font-size: small">I used to recommend Java as a good language to learn early, but <span style="text-decoration: underline">this critique </span>has changed my mind (search for “The Pitfalls of Java as a First Programming Language” within it). A hacker cannot, as they devastatingly put it “approach problem-solving like a plumber in a hardware store”; you have to know what the components actually <em>do</em>. Now I think it is probably best to learn C and Lisp first, then Java.</span></p>  <p align="justify"><span style="font-size: small"></span></p>  <p align="justify"><span style="font-size: small">There is perhaps a more general point here. If a language does too much for you, it may be simultaneously a good tool for production and a bad one for learning. It's not only languages that have this problem; web application frameworks like RubyOnRails, CakePHP, Django may make it too easy to reach a superficial sort of understanding that will leave you without resources when you have to tackle a hard problem, or even just debug the solution to an easy one.</span></p>  <p align="justify"><span style="font-size: small"></span></p>  <p align="justify"><span style="font-size: small">If you get into serious programming, you will have to learn C, the core language of Unix. C++ is very closely related to C; if you know one, learning the other will not be difficult. Neither language is a good one to try learning as your first, however. And, actually, the more you can avoid programming in C the more productive you will be.</span></p>  <p align="justify"><span style="font-size: small"></span></p>  <p align="justify"><span style="font-size: small">C is very efficient, and very sparing of your machine's resources. Unfortunately, C gets that efficiency by requiring you to do a lot of low-level management of resources (like memory) by hand. All that low-level code is complex and bug-prone, and will soak up huge amounts of your time on debugging. With today's machines as powerful as they are, this is usually a bad tradeoff — it's smarter to use a language that uses the machine's time less efficiently, but your time much <em>more</em> efficiently. Thus, Python.</span></p>  <p align="justify"><span style="font-size: small"></span></p>  <p align="justify"><span style="font-size: small">Other languages of particular importance to hackers include <span style="text-decoration: underline">Perl</span><span style="text-decoration: underline"> and </span><span style="text-decoration: underline">LISP</span> . Perl is worth learning for practical reasons; it's very widely used for active web pages and system administration, so that even if you never write Perl you should learn to read it. Many people use Perl in the way I suggest you should use Python, to avoid C programming on jobs that don't require C's machine efficiency. You will need to be able to understand their code.</span></p>  <p align="justify"><span style="font-size: small"></span></p>  <p align="justify"><span style="font-size: small">LISP is worth learning for a different reason — the profound enlightenment experience you will have when you finally get it. That experience will make you a better programmer for the rest of your days, even if you never actually use LISP itself a lot. (You can get some beginning experience with LISP fairly easily by writing and modifying editing modes for the Emacs text editor, or Script-Fu plugins for the GIMP.)</span></p>  <p align="justify"><span style="font-size: small"></span></p>  <p align="justify"><span style="font-size: small">It's best, actually, to learn all five of Python, C/C++, Java, Perl, and LISP.Besides being the most important hacking languages, they represent very different approaches to programming, and each will educate you in valuable ways.</span></p>  <p align="justify"><span style="font-size: small"></span></p>  <p align="justify"><span style="font-size: small">But be aware that you won't reach the skill level of a hacker or even merely a programmer simply by accumulating languages — you need to learn how to think about programming problems in a general way, independent of any one language. To be a real hacker, you need to get to the point where you can learn a new language in days by relating what's in the manual to what you already know. This means you should learn several very different languages.</span></p>  <p align="justify"><span style="font-size: small"></span></p>  <p align="justify"><span style="font-size: small">I can't give complete instructions on how to learn to program here — it's a complex skill. But I can tell you that books and courses won't do it — many, maybe <em>most</em> of the best hackers are self-taught. You can learn language features — bits of knowledge — from books, but the mind-set that makes that knowledge into living skill can be learned only by practice and apprenticeship. What will do it is (a) <em>reading code</em> and (b) <em>writing code</em>.</span></p>  <p align="justify"><span style="font-size: small"></span></p>  <p align="justify"><span style="font-size: small">Peter Norvig, who is one of Google's top hackers and the co-author of the most widely used textbook on AI, has written an excellent essay called <span style="text-decoration: underline">Teach Yourself Programming in Ten Years</span>. His "recipe for programming success" is worth careful attention.</span></p>  <p align="justify"><span style="font-size: small"></span></p>  <p align="justify"><span style="font-size: small">Learning to program is like learning to write good natural language. The best way to do it is to read some stuff written by masters of the form, write some things yourself, read a lot more, write a little more, read a lot more, write some more ... and repeat until your writing begins to develop the kind of strength and economy you see in your models. Finding good code to read used to be hard, because there were few large programs available in source for fledgeling hackers to read and tinker with. This has changed dramatically; open-source software, programming tools, and operating systems (all built by hackers) are now widely available. Which brings me neatly to our next topic...</span></p>  <p align="justify"></p>


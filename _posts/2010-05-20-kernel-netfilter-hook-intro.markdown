--- 
title: !binary |
  55CG6KejTmV0ZmlsdGVy

type: post
layout: post
tags: 
- Kernel
---
<br/><span style="font-family: 'Courier New'; font-size: x-small;">代码框内代码来自于Linux2.6内核</span><br/><br/><span style="font-family: 'Courier New'; font-size: x-small;"> </span><br/>一.通用防火墙简介：<br/>Linux上的防火墙一般是通过Netfilter来实现对包的有规则的过滤，防火墙模块在Linux上注册成为/dev的一个字符设备，通过 ioctl()设置过滤规则，在5个HOOK（ipv4中是5个）钓鱼点设置钩子函数，一般设置规则是通过设置相关的（源IP，源PORT，目的IP，目的IP）来实现。<br/><br/>二.Netfilter：<br/>Netfilter是一个框架，可以实现包过滤，NAT（net addr trans 网络地址转换），网络连接跟踪等功能。<br/>在IPV4中有5个HOOK点，我们称为钓鱼点，因为在这些地方，可以设置钩子函数（鱼钩）来获取符合条件的数据包（鱼）。5个HOOK点如下：<br/><table style="width: 550px; height: 173px;" border="1" cellspacing="1" cellpadding="1"><br/><tbody><br/><tr><br/><td style="vertical-align: top;">HOOK点</td><br/><td style="vertical-align: top;">说 明</td><br/><td style="vertical-align: top;">函数位置</td><br/><td style="vertical-align: top;">应用举例</td><br/></tr><br/><tr><br/><td>NF_IP_PRE_ROUTING</td><br/><td>由网卡传入主机的数据包，在没有经过IP层路由之前，会先经过这个点</td><br/><td>ip_rcv()</td><br/><td style="vertical-align: top;">过滤拒绝服务攻击NAT计算</td><br/></tr><br/><tr><br/><td style="vertical-align: top;">NF_IP_LOCAL_IN</td><br/><td style="vertical-align: top;">经过路由选择，要进入本机的数据包，会经过这个点</td><br/><td style="vertical-align: top;">ip_local_deliver()<br/>在此处可进行碎片重组</td><br/><td style="vertical-align: top;">防火墙过滤进入本机的包</td><br/></tr><br/><tr><br/><td>NF_IP_FORWARD</td><br/><td>经过路由，不是发往本机的包，需要向外发送，会经过这个点</td><br/><td>ip_forward()<br/>之后进入ip_send()</td><br/><td style="vertical-align: top;"></td><br/></tr><br/><tr><br/><td>NF_IP_LOCAL_OUT</td><br/><td>本机发往外部的数据包在经过路由之前会经过这个点</td><br/><td>ip_build_and_send_pkt()<br/>ip_queue_xmit（）<br/>ip_build_xmit_slow（）<br/>ip_buid_xmit（）<br/>不同的上层协议会走不同的流程</td><br/><td style="vertical-align: top;">防火墙过滤外发的数据包</td><br/></tr><br/><tr><br/><td>NF_IP_POST_ROUTING<br/>所有外出包都必须经过的钩子点</td><br/><td>本机发送出去的包，在路由后会经过此点</td><br/><td>ip_finish_output()</td><br/><td style="vertical-align: top;">包计数功能实现</td><br/></tr><br/></tbody><br/></table><br/>数据流描述：<br/><br/>简单的校验<br/>|<br/>NF_IP_PRE_ROUTING-><br/>|<br/>路由<br/>|<br/>发往本机--->发往外部 ->NF_IP_FORWARD---->NF_IP_POST_ROUTING<br/>|<br/>NF_IP_LOCAL_IN<br/>|<br/>高层的协议及进程<br/>|<br/>发包<br/>|<br/>NF_IP_LOCAL_OUT<br/>|<br/>路由<br/>|<br/>NF_IP_POST_ROUTING<br/><br/>HOOK函数的返回值<br/><div style="font-size: 12px; line-height: 12px; font-family: courier new;"><br/><table style="width: 100%; border: 0px; padding: 0px;" cellspacing="0"><br/><tbody><br/><tr><br/><td><span style="color: #000000;">include</span><span style="color: #ff0000;">/</span><span style="color: #000000;">linux</span><span style="color: #ff0000;">/</span><span style="color: #000000;">netfilter</span><span style="color: #ff0000;">.</span><span style="color: #000000;">h</span></td><br/></tr><br/></tbody><br/></table><br/></div><br/><div style="font-size: 12px; line-height: 12px; font-family: courier new;"><br/><table style="width: 100%; border: 0px; padding: 0px;" cellspacing="0"><br/><tbody><br/><tr><br/><td><span style="color: #000000;"> </span><span style="color: #000000;"> </span><span style="color: #000000;"> </span><span style="color: #0000ff;">#define</span><span style="color: #000000;"> </span><span style="color: #000000;">NF_DROP</span><span style="color: #000000;"> </span><strong><span style="color: #008080;">0</span></strong><span style="color: #008000;">//</span><span style="color: #008000;">丢弃数据包</span></td><br/></tr><br/><tr><br/><td><span style="color: #000000;"> </span><strong><span style="color: #008080;">19</span></strong><span style="color: #000000;">#define</span><span style="color: #000000;"> </span><span style="color: #000000;">NF_ACCEPT</span><span style="color: #000000;"> </span><strong><span style="color: #008080;">1</span></strong><span style="color: #008000;">//</span><span style="color: #008000;">允许该数据包继续传递<</span><span style="color: #008000;"> </span><span style="color: #008000;">/code></span></td><br/></tr><br/><tr><br/><td><span style="color: #000000;"> </span><strong><span style="color: #008080;">20</span></strong><span style="color: #000000;">#define</span><span style="color: #000000;"> </span><span style="color: #000000;">NF_STOLEN</span><span style="color: #000000;"> </span><strong><span style="color: #008080;">2</span></strong><span style="color: #008000;">//</span><span style="color: #008000;">接收该数据包，但不再传递，可以用于包的分片重组。<</span><span style="color: #008000;"> </span><span style="color: #008000;">/code></span></td><br/></tr><br/><tr><br/><td><span style="color: #000000;"> </span><strong><span style="color: #008080;">21</span></strong><span style="color: #000000;">#define</span><span style="color: #000000;"> </span><span style="color: #000000;">NF_QUEUE</span><span style="color: #000000;"> </span><strong><span style="color: #008080;">3</span></strong><span style="color: #008000;">//</span><span style="color: #008000;">将此数据包放入一特定队列，通常用于用户空间的处理。<</span><span style="color: #008000;"> </span><span style="color: #008000;">/code></span></td><br/></tr><br/><tr><br/><td><span style="color: #000000;"> </span><strong><span style="color: #008080;">22</span></strong><span style="color: #000000;">#define</span><span style="color: #000000;"> </span><span style="color: #000000;">NF_REPEAT</span><span style="color: #000000;"> </span><strong><span style="color: #008080;">4</span></strong><span style="color: #008000;">//</span><span style="color: #008000;">再次调用HOOK函数<</span><span style="color: #008000;"> </span><span style="color: #008000;">/code></span></td><br/></tr><br/><tr><br/><td><span style="color: #000000;"> </span><strong><span style="color: #008080;">23</span></strong><span style="color: #000000;">#define</span><span style="color: #000000;"> </span><span style="color: #000000;">NF_STOP</span><span style="color: #000000;"> </span><strong><span style="color: #008080;">5</span></strong></td><br/></tr><br/><tr><br/><td><span style="color: #000000;"> </span><strong><span style="color: #008080;">24</span></strong><span style="color: #000000;">#define</span><span style="color: #000000;"> </span><span style="color: #000000;">NF_MAX_VERDICT</span><span style="color: #000000;"> </span><span style="color: #000000;">NF_STOP</span></td><br/></tr><br/><tr><br/><td></td><br/></tr><br/></tbody><br/></table><br/></div><br/>三。 NF_HOOK宏<br/><br/>调用该宏将筛选过滤功能的代码连接到NETFILTER 中<br/><div style="font-size: 12px; line-height: 12px; font-family: courier new;"><br/><table style="width: 100%; border: 0px; padding: 0px;" cellspacing="0"><br/><tbody><br/><tr><br/><td><span style="color: #0000ff;">#define</span><span style="color: #000000;"> </span><span style="color: #000000;">NF_HOOK(pf,</span><span style="color: #000000;"> </span><span style="color: #000000;">hook,</span><span style="color: #000000;"> </span><span style="color: #000000;">skb,</span><span style="color: #000000;"> </span><span style="color: #000000;">indev,</span><span style="color: #000000;"> </span><span style="color: #000000;">outdev,</span><span style="color: #000000;"> </span><span style="color: #000000;">okfn)</span><span style="color: #000000;"> </span><span style="color: #000000;">(okfn)(skb)</span></td><br/></tr><br/></tbody><br/></table><br/></div><br/>四。注册Netfilter HOOK函数<br/>（就是向链表中添加一个节点，属性由协议簇和hook类型来确定）<br/>首先初始化一个 nf_hook_ips节点（见上方的解析）<br/>struct list_head nf_hooks[NPROTO指定协议族][NF_MAX_HOOKS指定hook类型]<br/><div style="font-size: 12px; line-height: 12px; font-family: courier new;"><br/><table style="width: 100%; border: 0px; padding: 0px;" cellspacing="0"><br/><tbody><br/><tr><br/><td style="color: teal;" valign="top">1</td><br/><td><strong><span style="color: #0000ff;">int</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">nf_register_hook(</span><strong><span style="color: #0000ff;">struct</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">nf_hook_ops</span><span style="color: #000000;"> </span><span style="color: #ff0000;">*</span><span style="color: #000000;">reg);</span><span style="color: #000000;"> </span><span style="color: #008000;">//</span><span style="color: #008000;">注册函数</span><span style="color: #008000;"> </span><span style="color: #008000;"> </span><span style="color: #008000;"> </span></td><br/></tr><br/><tr><br/><td style="color: teal;" valign="top">2</td><br/><td><strong><span style="color: #0000ff;">void</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">nf_unregister_hook(</span><strong><span style="color: #0000ff;">struct</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">nf_hook_ops</span><span style="color: #000000;"> </span><span style="color: #ff0000;">*</span><span style="color: #000000;">reg);</span><span style="color: #000000;"> </span><span style="color: #008000;">//</span><span style="color: #008000;">注册解除函数</span></td><br/></tr><br/></tbody><br/></table><br/></div><br/>内核中使用示例<br/><div style="font-size: 12px; line-height: 12px; font-family: courier new;"><br/><table style="width: 100%; border: 0px; padding: 0px;" cellspacing="0"><br/><tbody><br/><tr><br/><td><span style="color: #008000;">//</span><span style="color: #008000;">net/netfilter/core.c</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #0000ff;">int</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">nf_register_hook(</span><strong><span style="color: #0000ff;">struct</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">nf_hook_ops</span><span style="color: #000000;"> </span><span style="color: #ff0000;">*</span><span style="color: #000000;">reg)</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">60</span></strong><span style="color: #000000;">{</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">61</span></strong><span style="color: #000000;"> </span><strong><span style="color: #0000ff;">struct</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">nf_hook_ops</span><span style="color: #000000;"> </span><span style="color: #ff0000;">*</span><span style="color: #000000;">elem;</span><span style="color: #000000;"> </span><span style="color: #008000;">//</span><span style="color: #008000;">ops结构</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">62</span></strong><span style="color: #000000;"> </span><strong><span style="color: #0000ff;">int</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">err;</span><span style="color: #000000;"> </span><span style="color: #008000;">//</span><span style="color: #008000;">错误变量</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">63</span></strong></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">64</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">err</span><span style="color: #000000;"> </span><span style="color: #ff0000;">=</span><span style="color: #000000;"> </span><span style="color: #000000;">mutex_lock_interruptible(</span><span style="color: #ff0000;">&</span><span style="color: #000000;">nf_hook_mutex);</span><span style="color: #000000;"> </span><span style="color: #008000;">//</span><span style="color: #008000;">锁互斥量</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">65</span></strong><span style="color: #000000;"> </span><strong><span style="color: #0000ff;">if</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">(err</span><span style="color: #000000;"> </span><span style="color: #ff0000;"><</span><span style="color: #000000;"> </span><strong><span style="color: #008080;">0</span></strong><span style="color: #000000;">)</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">66</span></strong><span style="color: #000000;"> </span><span style="color: #000000;"> </span><strong><span style="color: #0000ff;">return</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">err;</span></td><br/></tr><br/><tr><br/><td></td><br/></tr><br/><tr><br/><td><span style="color: #008000;">//</span><span style="color: #008000;">根据优先级，将该hook插入合适的位置</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">67</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">list_for_each_entry(elem,</span><span style="color: #000000;"> </span><span style="color: #ff0000;">&</span><span style="color: #000000;">nf_hooks[reg</span><span style="color: #ff0000;">-</span><span style="color: #ff0000;">></span><span style="color: #000000;">pf][reg</span><span style="color: #ff0000;">-</span><span style="color: #ff0000;">></span><span style="color: #000000;">hooknum],</span><span style="color: #000000;"> </span><span style="color: #000000;">list)</span><span style="color: #000000;"> </span><span style="color: #000000;">{</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">68</span></strong><span style="color: #000000;"> </span><strong><span style="color: #0000ff;">if</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">(reg</span><span style="color: #ff0000;">-</span><span style="color: #ff0000;">></span><span style="color: #000000;">priority</span><span style="color: #000000;"> </span><span style="color: #ff0000;"><</span><span style="color: #000000;"> </span><span style="color: #000000;">elem</span><span style="color: #ff0000;">-</span><span style="color: #ff0000;">></span><span style="color: #000000;">priority)</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">69</span></strong><span style="color: #000000;"> </span><strong><span style="color: #ff0000;">break</span></strong><span style="color: #000000;">;</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">70</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">}</span></td><br/></tr><br/><tr><br/><td><span style="color: #008000;">//</span><span style="color: #008000;">增加一个节点</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">71</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">list_add_rcu(</span><span style="color: #ff0000;">&</span><span style="color: #000000;">reg</span><span style="color: #ff0000;">-</span><span style="color: #ff0000;">></span><span style="color: #000000;">list,</span><span style="color: #000000;"> </span><span style="color: #000000;">elem</span><span style="color: #ff0000;">-</span><span style="color: #ff0000;">></span><span style="color: #000000;">list</span><span style="color: #ff0000;">.</span><span style="color: #000000;">prev);</span></td><br/></tr><br/><tr><br/><td><span style="color: #008000;">//</span><span style="color: #008000;">解锁互斥量</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">72</span></strong><span style="color: #000000;"> </span><span style="color: #000000;">mutex_unlock(</span><span style="color: #ff0000;">&</span><span style="color: #000000;">nf_hook_mutex);</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">73</span></strong><span style="color: #000000;"> </span><strong><span style="color: #0000ff;">return</span></strong><span style="color: #000000;"> </span><strong><span style="color: #008080;">0</span></strong><span style="color: #000000;">;</span></td><br/></tr><br/><tr><br/><td><strong><span style="color: #008080;">74</span></strong><span style="color: #000000;">}</span></td><br/></tr><br/></tbody><br/></table><br/></div>

